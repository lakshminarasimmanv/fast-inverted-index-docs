"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9995],{3471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"bm25l","title":"BM25L","description":"BM25L is an extension of the BM25 ranking algorithm specifically designed to address the limitations of BM25 when dealing with short documents.","source":"@site/docs/bm25l.md","sourceDirName":".","slug":"/bm25l","permalink":"/docs/bm25l","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/bm25l.md","tags":[],"version":"current","frontMatter":{"id":"bm25l","title":"BM25L","sidebar_label":"BM25L"},"sidebar":"docs","previous":{"title":"LTR","permalink":"/docs/ltr"},"next":{"title":"Python Type Conversion","permalink":"/docs/python-type-conversion"}}');var s=t(4848),r=t(8453);const o={id:"bm25l",title:"BM25L",sidebar_label:"BM25L"},l="BM25L - Enhanced Document Ranking",a={},d=[{value:"BM25 Limitations",id:"bm25-limitations",level:2},{value:"How BM25L Improves Ranking",id:"how-bm25l-improves-ranking",level:2},{value:"Using BM25L",id:"using-bm25l",level:2},{value:"Customizing BM25L Parameters",id:"customizing-bm25l-parameters",level:2},{value:"When to Use BM25L",id:"when-to-use-bm25l",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"bm25l---enhanced-document-ranking",children:"BM25L - Enhanced Document Ranking"})}),"\n",(0,s.jsx)(n.p,{children:"BM25L is an extension of the BM25 ranking algorithm specifically designed to address the limitations of BM25 when dealing with short documents."}),"\n",(0,s.jsx)(n.h2,{id:"bm25-limitations",children:"BM25 Limitations"}),"\n",(0,s.jsx)(n.p,{children:"Traditional BM25 can sometimes undervalue short documents because its document length normalization can penalize them excessively. For documents with very few terms, this can lead to lower scores than would be intuitively expected."}),"\n",(0,s.jsx)(n.h2,{id:"how-bm25l-improves-ranking",children:"How BM25L Improves Ranking"}),"\n",(0,s.jsx)(n.p,{children:"BM25L modifies the BM25 formula by adding a non-negative parameter (delta) to the normalized term frequency. The key changes are:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Normalized term frequency calculation"}),": Instead of directly using the term frequency normalized by document length, BM25L first calculates ",(0,s.jsx)(n.code,{children:"ctd = tf / (1 - b + b * doc_length/avg_doc_length)"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Modified scoring formula"}),": The BM25L scoring formula becomes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"score = IDF * ((k1 + 1) * (ctd + delta)) / (k1 + ctd + delta)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["where ",(0,s.jsx)(n.code,{children:"ctd"})," is the length-normalized term frequency and ",(0,s.jsx)(n.code,{children:"delta"})," is a small constant (typically 0.5)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This adjustment ensures that even very short documents receive fair consideration in the ranking."}),"\n",(0,s.jsx)(n.h2,{id:"using-bm25l",children:"Using BM25L"}),"\n",(0,s.jsx)(n.p,{children:"You can use BM25L in your search queries by specifying it as the ranking method:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Index, RankingMethods\n\nindex = Index()\n# ... add documents ...\n\n# Search using BM25L\nresults = index.search("your query", ranking_method="bm25l")\n\n# Or with the constant\nresults = index.search("your query", ranking_method=RankingMethods.BM25L)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"customizing-bm25l-parameters",children:"Customizing BM25L Parameters"}),"\n",(0,s.jsx)(n.p,{children:"The default BM25L parameters work well for most collections, but you can customize them if needed through the Rust API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// Customize BM25L parameters (Rust API)\nlet results = index.search_bm25l(\n    &query,\n    field_boosts,\n    Some(1.2),  // k1 parameter (default is 1.5)\n    Some(0.8),  // b parameter (default is 0.75)\n    Some(0.7)   // delta parameter (default is 0.5)\n)?;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The parameters control:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"k1"}),": Term frequency saturation (how quickly additional occurrences of a term provide diminishing returns)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"b"}),": Document length normalization (how much to penalize long documents)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"delta"}),": Added to normalized term frequency to help short documents"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-bm25l",children:"When to Use BM25L"}),"\n",(0,s.jsx)(n.p,{children:"BM25L is particularly valuable when:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Your collection contains documents of highly variable lengths"}),"\n",(0,s.jsx)(n.li,{children:"Short documents are important but might be buried in search results"}),"\n",(0,s.jsx)(n.li,{children:"BM25 seems to favor long documents too heavily"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For collections with mostly uniform document lengths, regular BM25 may perform similarly."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);