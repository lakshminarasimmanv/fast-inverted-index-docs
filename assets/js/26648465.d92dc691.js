"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9046],{3163:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"observability","title":"ouservauility","description":"Fast-Inverted-Index provides comprehensive observability capabilities to help you monitor and debug your search system in production environments.","source":"@site/docs/observability.md","sourceDirName":".","slug":"/observability","permalink":"/docs/observability","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/observability.md","tags":[],"version":"current","frontMatter":{"id":"observability","title":"ouservauility","sidebar_label":"ouservauility"},"sidebar":"docs","previous":{"title":"Enterprise Search Testing","permalink":"/docs/enterprise-search-testing"},"next":{"title":"performance","permalink":"/docs/performance"}}');var s=t(4848),r=t(8453);const l={id:"observability",title:"ouservauility",sidebar_label:"ouservauility"},a="Observability & Monitoring",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Metrics System",id:"metrics-system",level:2},{value:"Available Metrics",id:"available-metrics",level:3},{value:"Exposing Metrics",id:"exposing-metrics",level:3},{value:"Integration with Prometheus",id:"integration-with-prometheus",level:3},{value:"Health Checks",id:"health-checks",level:2},{value:"Health Status Formats",id:"health-status-formats",level:3},{value:"Accessing Metrics in Python",id:"accessing-metrics-in-python",level:2},{value:"Recommended Dashboards",id:"recommended-dashboards",level:2},{value:"Example Use Cases",id:"example-use-cases",level:2},{value:"Monitoring Query Performance",id:"monitoring-query-performance",level:3},{value:"Tracking Index Growth",id:"tracking-index-growth",level:3},{value:"Health Checks for Load Balancers",id:"health-checks-for-load-balancers",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Validation",id:"validation",level:2},{value:"Integration Examples",id:"integration-examples",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"observability--monitoring",children:"Observability & Monitoring"})}),"\n",(0,s.jsx)(n.p,{children:"Fast-Inverted-Index provides comprehensive observability capabilities to help you monitor and debug your search system in production environments."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The observability system consists of three main components:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics"}),": Production-grade metrics using Prometheus for collection and export"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Health Checks"}),": Health status reporting for system components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logging"}),": Structured logging with contextual information"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.p,{children:["To start using the observability features, you need to create an ",(0,s.jsx)(n.code,{children:"ObservabilityContext"})," and connect it to your index:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use fast_inverted_index::{Index, IndexBuilder, ObservabilityContext};\n\n// Create observability context\nlet observability = ObservabilityContext::new();\n\n// Create your index\nlet mut index = Index::new().unwrap();\n\n// Connect the index metrics with observability\nlet obs_metrics = observability.metrics.clone();\nindex.metrics.with_observability(obs_metrics);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"metrics-system",children:"Metrics System"}),"\n",(0,s.jsx)(n.p,{children:"Fast-Inverted-Index provides a comprehensive metrics system based on Prometheus. The metrics are designed to help you understand the performance and behavior of your index in production."}),"\n",(0,s.jsx)(n.h3,{id:"available-metrics",children:"Available Metrics"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Metric Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_documents_total"})}),(0,s.jsx)(n.td,{children:"Counter"}),(0,s.jsx)(n.td,{children:"Total number of documents indexed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_documents_by_size"})}),(0,s.jsx)(n.td,{children:"Counter"}),(0,s.jsx)(n.td,{children:"Documents by size category"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_queries_total"})}),(0,s.jsx)(n.td,{children:"Counter"}),(0,s.jsx)(n.td,{children:"Total queries by type"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_indexing_operations_total"})}),(0,s.jsx)(n.td,{children:"Counter"}),(0,s.jsx)(n.td,{children:"Indexing operations by type"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_query_duration_seconds"})}),(0,s.jsx)(n.td,{children:"Histogram"}),(0,s.jsx)(n.td,{children:"Query latency distribution"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_indexing_duration_seconds"})}),(0,s.jsx)(n.td,{children:"Histogram"}),(0,s.jsx)(n.td,{children:"Indexing latency distribution"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_memory_usage_bytes"})}),(0,s.jsx)(n.td,{children:"Gauge"}),(0,s.jsx)(n.td,{children:"Memory usage"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_disk_usage_bytes"})}),(0,s.jsx)(n.td,{children:"Gauge"}),(0,s.jsx)(n.td,{children:"Disk usage"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_cache_operations_total"})}),(0,s.jsx)(n.td,{children:"Counter"}),(0,s.jsx)(n.td,{children:"Cache hits/misses"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_cache_size_entries"})}),(0,s.jsx)(n.td,{children:"Gauge"}),(0,s.jsx)(n.td,{children:"Current cache size"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_dictionary_entries"})}),(0,s.jsx)(n.td,{children:"Gauge"}),(0,s.jsx)(n.td,{children:"Dictionary entries by tier"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fii_health_status"})}),(0,s.jsx)(n.td,{children:"Gauge"}),(0,s.jsx)(n.td,{children:"Health status by component"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"exposing-metrics",children:"Exposing Metrics"}),"\n",(0,s.jsx)(n.p,{children:"To expose Prometheus metrics via HTTP in Rust:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use prometheus_http_api::HttpServer;\n\n// Start a Prometheus HTTP server\nlet server = HttpServer::new(observability.registry());\nserver.start("0.0.0.0:9091").unwrap();\n'})}),"\n",(0,s.jsx)(n.p,{children:"For Python applications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import start_http_server, Gauge, Counter\n\n# Set up Prometheus metrics\nDOCUMENTS_TOTAL = Gauge('fii_documents_total', 'Total number of documents indexed')\nTERMS_TOTAL = Gauge('fii_terms_total', 'Total number of terms in the index')\n\ndef update_prometheus_metrics(index):\n    \"\"\"Update Prometheus metrics from index stats\"\"\"\n    stats = index.stats()\n    DOCUMENTS_TOTAL.set(stats['document_count'])\n    TERMS_TOTAL.set(stats['term_count'])\n\n# Start Prometheus server\nstart_http_server(9090)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-with-prometheus",children:"Integration with Prometheus"}),"\n",(0,s.jsx)(n.p,{children:"Add your metrics endpoint to your Prometheus configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"scrape_configs:\n  - job_name: 'fast-inverted-index'\n    scrape_interval: 15s\n    static_configs:\n      - targets: ['your-server:9091']\n"})}),"\n",(0,s.jsx)(n.h2,{id:"health-checks",children:"Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"The health check system provides status information about different components of your index:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fast_inverted_index::health::{HealthStatus, ComponentHealth};\n\n// Check overall health\nlet status = observability.check_health();\nif status != HealthStatus::Healthy {\n    println!("System health is degraded!");\n}\n\n// Add or update component health\nobservability.health.update_component(\n    "cache",\n    ComponentHealth::healthy().with_metric("hit_rate", 0.95)\n);\n\n// Get a detailed health report\nlet report = observability.health.health_report();\nprintln!("{}", report);  // JSON formatted health report\n'})}),"\n",(0,s.jsx)(n.h3,{id:"health-status-formats",children:"Health Status Formats"}),"\n",(0,s.jsx)(n.p,{children:"The health report is returned in JSON format, making it easy to integrate with monitoring systems:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "Healthy",\n  "last_checked": "1609459200",\n  "components": {\n    "index": {\n      "status": "Healthy",\n      "metrics": {\n        "metric_document_count": "1000000",\n        "metric_avg_query_time_ms": "1.23"\n      }\n    },\n    "cache": {\n      "status": "Healthy",\n      "metrics": {\n        "metric_hit_rate": "0.95"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"accessing-metrics-in-python",children:"Accessing Metrics in Python"}),"\n",(0,s.jsxs)(n.p,{children:["In Python applications, you can access metrics through the ",(0,s.jsx)(n.code,{children:"stats()"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from fast_inverted_index import Index\n\n# Create an index\nindex = Index()\n\n# Get metrics\nstats = index.stats()\nprint(f\"Documents indexed: {stats['document_count']}\")\nprint(f\"Average query time: {stats['avg_query_time_ms']} ms\")\nprint(f\"Cache hit rate: {stats['cache_hit_rate']}\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"recommended-dashboards",children:"Recommended Dashboards"}),"\n",(0,s.jsx)(n.p,{children:"For monitoring in production, we recommend creating Grafana dashboards with the following panels:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Query Performance"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query latency (p50, p95, p99)"}),"\n",(0,s.jsx)(n.li,{children:"Queries per second"}),"\n",(0,s.jsx)(n.li,{children:"Query types distribution"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Index Operations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Documents indexed per second"}),"\n",(0,s.jsx)(n.li,{children:"Indexing latency"}),"\n",(0,s.jsx)(n.li,{children:"Index size growth"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cache Performance"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache hit rate"}),"\n",(0,s.jsx)(n.li,{children:"Cache size"}),"\n",(0,s.jsx)(n.li,{children:"Cache evictions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dictionary Performance"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Terms by tier (hot/medium/cold)"}),"\n",(0,s.jsx)(n.li,{children:"Dictionary hit rate"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Health Status"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Component health status"}),"\n",(0,s.jsx)(n.li,{children:"Failed health checks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"monitoring-query-performance",children:"Monitoring Query Performance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Every query is automatically timed and recorded\nlet timer = index.metrics.start_typed_query_timer("term");\nlet results = index.term_query("example");\n// Timer automatically records when it goes out of scope\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tracking-index-growth",children:"Tracking Index Growth"}),"\n",(0,s.jsx)(n.p,{children:"The metrics automatically track document and term counts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Adding documents automatically updates metrics\nindex.add_document(1, "Example document").unwrap();\n\n// You can view stats anytime\nprintln!("Indexed {} documents", index.stats().document_count);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"health-checks-for-load-balancers",children:"Health Checks for Load Balancers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Create a simple health check endpoint\nfn health_endpoint() -> Response {\n    let status = observability.check_health();\n    \n    match status {\n        HealthStatus::Healthy => Response::ok("Healthy"),\n        HealthStatus::Degraded => Response::status(200, "Degraded"),\n        HealthStatus::Unhealthy => Response::status(503, "Unhealthy"),\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Monitor Cache Hit Rates"}),": Keep track of your cache hit rates. If they fall below 80%, consider increasing cache size."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Watch Dictionary Tier Distribution"}),": The dictionary's performance depends on having hot terms in the hot tier. Monitor this distribution."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Set Up Alerts"}),": Configure alerts for unusual patterns:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query latency spikes"}),"\n",(0,s.jsx)(n.li,{children:"High error rates"}),"\n",(0,s.jsx)(n.li,{children:"Disk/memory usage above thresholds"}),"\n",(0,s.jsx)(n.li,{children:"Cache hit rate below threshold"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Periodic Optimization"}),": Schedule index optimizations during low-traffic periods."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Resource Monitoring"}),": Always monitor memory and disk usage alongside index-specific metrics."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,s.jsx)(n.p,{children:"The repository includes validation scripts to verify the observability system is working correctly:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"test_observability.py"}),": Basic tests to validate metrics are being tracked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"validate_observability.py"}),": Comprehensive validation of metrics behavior under load"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Run the validation script before deploying to production:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python validate_observability.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will ensure the observability features are reporting accurately for your deployment."}),"\n",(0,s.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,s.jsx)(n.p,{children:"For complete examples of observability in action, see:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Rust example: ",(0,s.jsx)(n.code,{children:"src/observability/example.rs"})]}),"\n",(0,s.jsxs)(n.li,{children:["Python example: ",(0,s.jsx)(n.code,{children:"python/README_observability.md"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These examples demonstrate how to set up monitoring and health checks in both Rust and Python applications."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);