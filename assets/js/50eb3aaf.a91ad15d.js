"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[452],{2712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"python-type-conversion","title":"Python Type Conversion","description":"This document explains how types are converted between Python and Rust in the Fast Inverted Index library, focusing on fields like tags, document metadata, and search parameters.","source":"@site/docs/python_type_conversion.md","sourceDirName":".","slug":"/python-type-conversion","permalink":"/fast-inverted-index-docs/docs/python-type-conversion","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/python_type_conversion.md","tags":[],"version":"current","frontMatter":{"id":"python-type-conversion","title":"Python Type Conversion","sidebar_label":"Python Type Conversion"},"sidebar":"docs","previous":{"title":"BM25L","permalink":"/fast-inverted-index-docs/docs/bm25l"},"next":{"title":"Enterprise Search Testing","permalink":"/fast-inverted-index-docs/docs/enterprise-search-testing"}}');var i=t(4848),d=t(8453);const s={id:"python-type-conversion",title:"Python Type Conversion",sidebar_label:"Python Type Conversion"},a="Python Type Conversion in Fast Inverted Index",o={},l=[{value:"Version 0.4.6 Type Handling Improvements",id:"version-046-type-handling-improvements",level:2},{value:"Fields and Metadata Handling",id:"fields-and-metadata-handling",level:2},{value:"Tags Field",id:"tags-field",level:3},{value:"Supported Field Types",id:"supported-field-types",level:3},{value:"Document Metadata Preservation",id:"document-metadata-preservation",level:3},{value:"Batch Document Processing",id:"batch-document-processing",level:2},{value:"Query Building and Search",id:"query-building-and-search",level:2},{value:"QueryBuilder API",id:"querybuilder-api",level:3},{value:"Search Methods",id:"search-methods",level:3},{value:"Helper Methods",id:"helper-methods",level:2},{value:"validate_document",id:"validate_document",level:3},{value:"prepare_metadata",id:"prepare_metadata",level:3},{value:"Type Conversion Workflow",id:"type-conversion-workflow",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Thread Safety",id:"thread-safety",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"python-type-conversion-in-fast-inverted-index",children:"Python Type Conversion in Fast Inverted Index"})}),"\n",(0,i.jsxs)(n.p,{children:["This document explains how types are converted between Python and Rust in the Fast Inverted Index library, focusing on fields like ",(0,i.jsx)(n.code,{children:"tags"}),", document metadata, and search parameters."]}),"\n",(0,i.jsx)(n.h2,{id:"version-046-type-handling-improvements",children:"Version 0.4.6 Type Handling Improvements"}),"\n",(0,i.jsx)(n.p,{children:"Fast Inverted Index 0.4.6 includes comprehensive improvements to the type conversion system to handle common Python data types more robustly:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Tag field handling (supporting both string and list formats)"}),"\n",(0,i.jsx)(n.li,{children:"Document metadata preservation during parallel indexing"}),"\n",(0,i.jsx)(n.li,{children:"Batch document processing with mixed field types"}),"\n",(0,i.jsx)(n.li,{children:"Enhanced search parameters and results"}),"\n",(0,i.jsx)(n.li,{children:"Better error messages for conversion failures"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fields-and-metadata-handling",children:"Fields and Metadata Handling"}),"\n",(0,i.jsx)(n.h3,{id:"tags-field",children:"Tags Field"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"tags"})," field is specially handled to support both string and list formats:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# As a String (Space-Separated)\nindex.add_document(1, "Document content", {\n    "tags": "tag1 tag2 tag3"\n})\n\n# As a List of Strings\nindex.add_document(1, "Document content", {\n    "tags": ["tag1", "tag2", "tag3"]\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:"When retrieving documents, tags are always returned as a list of strings for consistency."}),"\n",(0,i.jsx)(n.h3,{id:"supported-field-types",children:"Supported Field Types"}),"\n",(0,i.jsx)(n.p,{children:"The library supports the following field types:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field Type"}),(0,i.jsx)(n.th,{children:"Python Type"}),(0,i.jsx)(n.th,{children:"Example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Text"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Document content"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Tags"}),(0,i.jsx)(n.td,{children:"String or List[String]"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:'"tag1 tag2"'})," or ",(0,i.jsx)(n.code,{children:'["tag1", "tag2"]'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Numeric"}),(0,i.jsx)(n.td,{children:"int, float"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"42"}),", ",(0,i.jsx)(n.code,{children:"3.14"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"True"}),", ",(0,i.jsx)(n.code,{children:"False"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Timestamp"}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int(time.time())"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"document-metadata-preservation",children:"Document Metadata Preservation"}),"\n",(0,i.jsx)(n.p,{children:"A significant improvement in version 0.4.6 is the preservation of document metadata during parallel indexing:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Existing metadata is preserved when merging partial indices"}),"\n",(0,i.jsx)(n.li,{children:"Timestamps and other metadata fields are properly updated during indexing"}),"\n",(0,i.jsx)(n.li,{children:"Field values are consistently handled across different operation types"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"batch-document-processing",children:"Batch Document Processing"}),"\n",(0,i.jsx)(n.p,{children:"The library now robustly handles batch document additions with mixed field types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Add multiple documents with different field formats\ndocuments = [\n    (1, {"content": "Document 1", "tags": ["tag1", "tag2"]}),\n    (2, {"content": "Document 2", "tags": "tag3 tag4"})\n]\n\n# Format is (doc_id, fields_dict)\nindex.add_documents_with_fields_parallel(documents)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Each document's fields are properly converted and preserved during batch processing."}),"\n",(0,i.jsx)(n.h2,{id:"query-building-and-search",children:"Query Building and Search"}),"\n",(0,i.jsx)(n.h3,{id:"querybuilder-api",children:"QueryBuilder API"}),"\n",(0,i.jsx)(n.p,{children:"The QueryBuilder provides a convenient way to build boolean queries:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create a QueryBuilder with an index\nbuilder = QueryBuilder(index)\n\n# Add terms to the builder (returns the builder for method chaining)\nbuilder.add_term("term1").add_term("term2")\n\n# Build an OR query (returns document IDs that match ANY of the terms)\ndoc_ids = builder.build_or_query()  # Returns a list of doc_ids\n\n# Build an AND query (returns document IDs that match ALL of the terms)\ndoc_ids = builder.build_and_query()  # Returns a list of doc_ids\n\n# Clear terms for reuse\nbuilder.clear().add_term("new_term")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For complete documentation of the QueryBuilder API, see the dedicated ",(0,i.jsx)(n.a,{href:"/fast-inverted-index-docs/docs/query-builder",children:"Query Builder"})," documentation."]}),"\n",(0,i.jsx)(n.h3,{id:"search-methods",children:"Search Methods"}),"\n",(0,i.jsx)(n.p,{children:"The library provides several ways to search:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# String-based search (returns list of (doc_id, score) tuples)\nresults = index.search("term1 term2")  # Default AND behavior\nresults = index.search("term1 OR term2")  # OR behavior\n\n# With parameters\nresults = index.search("term1", \n                      limit=10,  # Limit results\n                      boost_fields={"title": 3.0, "tags": 1.5})  # Field boosting\n\n# QueryNode API for advanced queries\nfrom fast_inverted_index import QueryNode, QueryExecutionParams\n\nquery = QueryNode.OR([\n    QueryNode.term("title", "term1", boost=2.0),\n    QueryNode.term("content", "term2")\n])\n\nparams = QueryExecutionParams(scoring_algorithm="bm25l", limit=10)\nresult = index.execute_query(query, params)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"helper-methods",children:"Helper Methods"}),"\n",(0,i.jsx)(n.p,{children:"The library provides helper methods to validate and prepare document metadata:"}),"\n",(0,i.jsx)(n.h3,{id:"validate_document",children:"validate_document"}),"\n",(0,i.jsx)(n.p,{children:"Checks if a document's metadata is valid before adding it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'is_valid, errors = index.validate_document(doc_id, content, metadata)\nif not is_valid:\n    print(f"Document validation errors: {errors}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"prepare_metadata",children:"prepare_metadata"}),"\n",(0,i.jsx)(n.p,{children:"Converts metadata to a format acceptable by the indexer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Convert fields to indexer-friendly format\nprepared = index.prepare_metadata(metadata)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"type-conversion-workflow",children:"Type Conversion Workflow"}),"\n",(0,i.jsx)(n.p,{children:"Follow this recommended workflow to avoid type conversion issues:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Validate documents"})," before indexing:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'is_valid, errors = index.validate_document(doc_id, content, metadata)\nif not is_valid:\n    print(f"Document {doc_id} is invalid: {errors}")\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Convert metadata"})," to ensure compatibility:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"compatible_metadata = index.prepare_metadata(metadata)\nindex.add_document(doc_id, content, compatible_metadata)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use proper types"})," for each field:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"}),", ",(0,i.jsx)(n.code,{children:"content"}),", ",(0,i.jsx)(n.code,{children:"summary"}),", ",(0,i.jsx)(n.code,{children:"category"}),", ",(0,i.jsx)(n.code,{children:"language"}),": String"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tags"}),": String (space-separated) or List of strings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"created_at"}),", ",(0,i.jsx)(n.code,{children:"updated_at"}),": Integer timestamp"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The library provides descriptive error messages to help diagnose type conversion issues:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"\"Field 'tags' expected a string or list of strings\""})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"Field value cannot be a dictionary. Convert to a string representation first."'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"Metadata must be a dictionary"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"Document already exists: {id}"'})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"For optimal type handling:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For tags"}),": Use either list format ",(0,i.jsx)(n.code,{children:'["tag1", "tag2"]'})," or space-separated strings ",(0,i.jsx)(n.code,{children:'"tag1 tag2"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For batch operations"}),": Be consistent with field types across documents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For search"}),": Use raw query strings for simple operations and QueryNode for complex queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For field boosting"}),": Use the ",(0,i.jsx)(n.code,{children:"boost_fields"})," parameter: ",(0,i.jsx)(n.code,{children:'index.search("query", boost_fields={"title": 2.0})'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For complex data types"}),": Convert to strings before indexing (e.g., using ",(0,i.jsx)(n.code,{children:"json.dumps()"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For content storage"}),": Use external storage like Redis for document content as shown in ",(0,i.jsx)(n.a,{href:"/fast-inverted-index-docs/docs/document-content-storage",children:"Document Content Storage"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,i.jsx)(n.p,{children:"All type conversion operations are thread-safe, allowing for concurrent document addition and searching without type conversion issues. The thread safety improvements in version 0.4.5 and above ensure reliable operation in multi-threaded environments."})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},d=r.createContext(i);function s(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);