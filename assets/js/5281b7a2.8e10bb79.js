"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2443],{5874:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"architecture","title":"architecture","description":"Overview","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/fast-inverted-index-docs/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/architecture.md","tags":[],"version":"current","frontMatter":{"id":"architecture","title":"architecture","sidebar_label":"architecture"},"sidebar":"docs","previous":{"title":"examples","permalink":"/fast-inverted-index-docs/docs/examples"},"next":{"title":"Architecture Overview","permalink":"/fast-inverted-index-docs/docs/architecture-overview"}}');var s=i(4848),t=i(8453);const o={id:"architecture",title:"architecture",sidebar_label:"architecture"},l="System Architecture",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Dictionary",id:"1-dictionary",level:3},{value:"2. Posting Lists",id:"2-posting-lists",level:3},{value:"3. Storage Layer",id:"3-storage-layer",level:3},{value:"4. Query Engine",id:"4-query-engine",level:3},{value:"5. Cache",id:"5-cache",level:3},{value:"Architecture Diagram",id:"architecture-diagram",level:2},{value:"Data Flow",id:"data-flow",level:2},{value:"Design Decisions",id:"design-decisions",level:2},{value:"Performance Optimizations",id:"performance-optimizations",level:3},{value:"Concurrency",id:"concurrency",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Component Interactions",id:"component-interactions",level:3},{value:"Error Handling Strategy",id:"error-handling-strategy",level:3},{value:"Technology Choices",id:"technology-choices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"system-architecture",children:"System Architecture"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Fast-Inverted-Index is a high-performance search engine library implemented in Rust with Python bindings. It provides efficient term-to-document mapping for full-text search capabilities while optimizing for both memory usage and query performance."}),"\n",(0,s.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(n.p,{children:"The system is organized into several key components, each responsible for a specific aspect of the search functionality:"}),"\n",(0,s.jsx)(n.h3,{id:"1-dictionary",children:"1. Dictionary"}),"\n",(0,s.jsx)(n.p,{children:"The dictionary component manages term storage and lookup using a hybrid approach:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hybrid Dictionary"}),": Multi-tiered storage optimized for different access patterns","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hot terms: Hash-based structure for O(1) lookup of frequently accessed terms"}),"\n",(0,s.jsx)(n.li,{children:"Medium terms: Radix Trie for O(k) lookup with prefix compression"}),"\n",(0,s.jsx)(n.li,{children:"Cold terms: Simple hash map for infrequently accessed terms"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Automatic promotion/demotion of terms between tiers based on access patterns"}),"\n",(0,s.jsx)(n.li,{children:"Memory optimization through string interning"}),"\n",(0,s.jsx)(n.li,{children:"Fast prefix matching for autocomplete/suggestions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-posting-lists",children:"2. Posting Lists"}),"\n",(0,s.jsx)(n.p,{children:"Posting lists store document occurrences for each term with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Skip list optimization for faster list intersections"}),"\n",(0,s.jsx)(n.li,{children:"Variable-length integer (varint) encoding for compression"}),"\n",(0,s.jsx)(n.li,{children:"Position tracking for potential phrase queries"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-storage-layer",children:"3. Storage Layer"}),"\n",(0,s.jsx)(n.p,{children:"The storage layer provides persistence capabilities through:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"RocksDB integration for reliable on-disk storage"}),"\n",(0,s.jsx)(n.li,{children:"Column families for organizing different data types"}),"\n",(0,s.jsx)(n.li,{children:"Serialization/deserialization with efficient binary formats"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-query-engine",children:"4. Query Engine"}),"\n",(0,s.jsx)(n.p,{children:"The query engine handles search operations with support for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Boolean operators (AND, OR)"}),"\n",(0,s.jsx)(n.li,{children:"Term frequency scoring"}),"\n",(0,s.jsx)(n.li,{children:"BM25 and TF-IDF ranking algorithms"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-cache",children:"5. Cache"}),"\n",(0,s.jsx)(n.p,{children:"The caching system improves performance through:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"LRU (Least Recently Used) caching strategy"}),"\n",(0,s.jsx)(n.li,{children:"Configurable TTL (Time-To-Live)"}),"\n",(0,s.jsx)(n.li,{children:"Thread-safe implementation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture-diagram",children:"Architecture Diagram"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Python API                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502\n                                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                       Rust Implementation                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502           \u2502           \u2502           \u2502               \u2502\n\u2502 Dictionary\u2502  Postings \u2502   Query   \u2502  Storage  \u2502     Cache     \u2502\n\u2502  (Hybrid) \u2502 (SkipList)\u2502  Engine   \u2502 (RocksDB) \u2502     (LRU)     \u2502\n\u2502           \u2502           \u2502           \u2502           \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Indexing Flow:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Documents are added through the indexing API"}),"\n",(0,s.jsx)(n.li,{children:"Text is tokenized into terms"}),"\n",(0,s.jsx)(n.li,{children:"Terms are added to the dictionary"}),"\n",(0,s.jsx)(n.li,{children:"Postings are created and added to posting lists"}),"\n",(0,s.jsx)(n.li,{children:"Data is persisted to storage"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Query Flow:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query is parsed into terms and operators"}),"\n",(0,s.jsx)(n.li,{children:"Terms are looked up in the dictionary"}),"\n",(0,s.jsx)(n.li,{children:"Posting lists are retrieved (from cache if available)"}),"\n",(0,s.jsx)(n.li,{children:"Lists are intersected or united based on query operators"}),"\n",(0,s.jsx)(n.li,{children:"Results are ranked using the specified algorithm"}),"\n",(0,s.jsx)(n.li,{children:"Document metadata is retrieved and returned"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"design-decisions",children:"Design Decisions"}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hybrid Dictionary"}),": Multi-tiered term storage with adaptive promotion/demotion optimizes for Zipfian term distribution in real-world search."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Skip Lists"}),": Block-level skip pointers reduce the number of comparisons needed during list intersections, improving query performance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Varint Encoding"}),": Variable-length integer encoding reduces storage requirements while maintaining good decompression performance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LRU Caching"}),": Frequently accessed posting lists are kept in memory to avoid disk access."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"String Interning"}),": Deduplicates string storage for terms, reducing memory footprint."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Radix Trie"}),": Efficient prefix-based term storage enables fast suggestion generation and memory savings."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"concurrency",children:"Concurrency"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Thread-safe cache implementation"}),"\n",(0,s.jsx)(n.li,{children:"Immutable references where possible"}),"\n",(0,s.jsx)(n.li,{children:"Transaction-like operations in the storage layer"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Custom allocators for large collection types"}),"\n",(0,s.jsx)(n.li,{children:"Efficient binary serialization formats"}),"\n",(0,s.jsx)(n.li,{children:"Lazy loading of posting lists"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h3,{id:"component-interactions",children:"Component Interactions"}),"\n",(0,s.jsx)(n.p,{children:"Components interact through well-defined interfaces:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The dictionary provides term-to-posting-list mapping"}),"\n",(0,s.jsx)(n.li,{children:"The query engine uses the dictionary to resolve terms"}),"\n",(0,s.jsx)(n.li,{children:"The storage layer provides persistence for all components"}),"\n",(0,s.jsx)(n.li,{children:"The cache intercepts storage access for frequently used data"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"error-handling-strategy",children:"Error Handling Strategy"}),"\n",(0,s.jsx)(n.p,{children:"The library uses a custom error type hierarchy with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Specific error variants for different failure cases"}),"\n",(0,s.jsx)(n.li,{children:"Informative error messages"}),"\n",(0,s.jsx)(n.li,{children:"Proper error propagation through the Result type"}),"\n",(0,s.jsx)(n.li,{children:"Conversion to Python exceptions in the bindings"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"technology-choices",children:"Technology Choices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rust"}),": For performance, memory safety, and concurrency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RocksDB"}),": For efficient key-value storage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PyO3"}),": For high-quality Python bindings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Varint"}),": For efficient integer compression"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);