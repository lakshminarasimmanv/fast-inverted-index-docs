"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7624],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},d=r.createContext(i);function s(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(d.Provider,{value:n},e.children)}},9362:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api","title":"API Reference","description":"Rust API","source":"@site/docs/api.md","sourceDirName":".","slug":"/api","permalink":"/docs/api","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/api.md","tags":[],"version":"current","frontMatter":{"id":"api","title":"API Reference","sidebar_label":"API Reference"},"sidebar":"docs","previous":{"title":"getting started","permalink":"/docs/getting-started"},"next":{"title":"schema","permalink":"/docs/schema"}}');var i=t(4848),d=t(8453);const s={id:"api",title:"API Reference",sidebar_label:"API Reference"},o="API Reference",a={},c=[{value:"Rust API",id:"rust-api",level:2},{value:"Index",id:"index",level:3},{value:"Index Creation",id:"index-creation",level:4},{value:"Document Operations",id:"document-operations",level:4},{value:"Query Operations",id:"query-operations",level:4},{value:"Term Suggestions",id:"term-suggestions",level:4},{value:"Index Management",id:"index-management",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Python API",id:"python-api",level:2},{value:"Index Creation",id:"index-creation-1",level:3},{value:"Basic Construction (Simple)",id:"basic-construction-simple",level:4},{value:"Builder Pattern (Advanced)",id:"builder-pattern-advanced",level:4},{value:"Using IndexConfig (Advanced)",id:"using-indexconfig-advanced",level:4},{value:"Document Operations",id:"document-operations-1",level:3},{value:"Basic Document Operations",id:"basic-document-operations",level:4},{value:"Multi-Field Document Operations",id:"multi-field-document-operations",level:4},{value:"Query Operations",id:"query-operations-1",level:3},{value:"Term Suggestions",id:"term-suggestions-1",level:3},{value:"Index Management",id:"index-management-1",level:3},{value:"Query Builder",id:"query-builder",level:3},{value:"Error Handling",id:"error-handling-1",level:3},{value:"Constants",id:"constants",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,i.jsx)(n.h2,{id:"rust-api",children:"Rust API"}),"\n",(0,i.jsx)(n.h3,{id:"index",children:"Index"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Index"})," struct is the main entry point for interacting with the library."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'/// Create a new index with default settings\nlet index = IndexBuilder::new().build()?;\n\n/// Add a document to the index\nindex.add_document(1, "This is a test document")?;\n\n/// Query the index\nlet query = Query::term("test");\nlet results = index.query(&query)?;\n'})}),"\n",(0,i.jsx)(n.h4,{id:"index-creation",children:"Index Creation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Create with all default options\nlet index = IndexBuilder::new().build()?;\n\n// Create with custom settings\nlet index = IndexBuilder::new()\n    .with_storage_path("/path/to/index")\n    .with_cache_size(100_000)\n    .with_cache_ttl(Duration::from_secs(3600))\n    .with_store_positions(true)\n    .with_in_memory(false)\n    .build()?;\n'})}),"\n",(0,i.jsx)(n.h4,{id:"document-operations",children:"Document Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Add a document with ID and content\nindex.add_document(doc_id, "Document content")?;\n\n// Add with metadata\nindex.add_document_with_metadata(\n    doc_id,\n    "Document content",\n    DocumentMetadata {\n        id: doc_id,\n        title: "Document Title".to_string(),\n        author: Some("Author Name".to_string()),\n        tags: vec!["tag1".to_string(), "tag2".to_string()],\n        ..Default::default()\n    }\n)?;\n\n// Remove a document\nindex.remove_document(doc_id)?;\n\n// Get document metadata\nlet docs = index.get_documents(&[doc_id])?;\n'})}),"\n",(0,i.jsx)(n.h4,{id:"query-operations",children:"Query Operations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Basic Query API (Legacy)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Single term query\nlet query = Query::term("word");\nlet results = index.query(&query)?;\n\n// AND query\nlet query = Query::and(vec!["word1".to_string(), "word2".to_string()]);\nlet results = index.query(&query)?;\n\n// OR query\nlet query = Query::or(vec!["word1".to_string(), "word2".to_string()]);\nlet results = index.query(&query)?;\n\n// Parse query from string\nlet query = Query::parse("word1 word2"); // Default AND\nlet results = index.query(&query)?;\n\n// Ranked search with BM25\nlet results = index.search_bm25(&query, None)?;\n\n// Ranked search with TF-IDF\nlet results = index.search_tfidf(&query, None)?;\n\n// Field boosting\nlet mut boosts = HashMap::new();\nboosts.insert("title".to_string(), 2.0);\nboosts.insert("tags".to_string(), 1.5);\nlet results = index.search_bm25(&query, Some(boosts))?;\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advanced Query Engine API"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use std::ops::Bound;\nuse std::collections::HashMap;\nuse fast_inverted_index::query::{QueryNode, Value, QueryExecutionParams, ScoringAlgorithm};\n\n// Create a term query\nlet query = QueryNode::term("content", "search");\n\n// Create a phrase query\nlet query = QueryNode::phrase("content", vec!["fast", "search"], 2);\n\n// Create a boosted term query\nlet query = QueryNode::term_with_boost("title", "search", 2.0);\n\n// Boolean operators\nlet query = QueryNode::and(vec![\n    QueryNode::term("content", "search"),\n    QueryNode::term("title", "engine")\n]);\n\n// Range query\nlet query = QueryNode::range(\n    "word_count", \n    Bound::Included(Value::Integer(100)), \n    Bound::Excluded(Value::Integer(500))\n);\n\n// Create execution parameters\nlet mut params = QueryExecutionParams {\n    scoring_algorithm: ScoringAlgorithm::BM25,\n    limit: Some(10),\n    explain: true,\n    ..Default::default()\n};\n\n// Add field boosts\nparams.field_boosts.insert("title".to_string(), 2.0);\nparams.field_boosts.insert("tags".to_string(), 1.5);\n\n// Execute the query\nlet result = index.execute_query(&query, Some(params))?;\n\n// Get scored documents\nfor (doc_id, score) in &result.scored_docs {\n    println!("Document {}: score {}", doc_id, score);\n}\n\n// Get score explanations\nif let Some(explanations) = &result.explanations {\n    if let Some(explanation) = explanations.get(&doc_id) {\n        println!("{}", explanation.to_string_tree());\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/docs/query-engine",children:"Query Engine documentation"})," for more details on the advanced query capabilities."]}),"\n",(0,i.jsx)(n.h4,{id:"term-suggestions",children:"Term Suggestions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Get term suggestions for a prefix\nlet suggestions = index.suggest_terms("prog")?;\n\n// Access suggestion details\nfor suggestion in suggestions {\n    println!("Term: {}, Score: {}, Doc Frequency: {}", \n        suggestion.term, suggestion.score, suggestion.doc_frequency);\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"index-management",children:"Index Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Get index statistics\nlet stats = index.stats()?;\nprintln!("Documents: {}, Terms: {}", stats.document_count, stats.term_count);\n\n// Optimize the index\nindex.optimize()?;\n\n// Create a backup\nindex.backup(PathBuf::from("/path/to/backup"))?;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use fast_inverted_index::errors::{Result, IndexError};\n\nfn example() -> Result<()> {\n    let index = IndexBuilder::new().build()?;\n    \n    // Handle specific error types\n    match index.query(&Query::term("test")) {\n        Ok(results) => println!("Found {} results", results.doc_ids.len()),\n        Err(IndexError::TermNotFound(term)) => println!("Term not found: {}", term),\n        Err(IndexError::IoError(e)) => println!("IO error: {}", e),\n        Err(e) => println!("Other error: {}", e),\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"python-api",children:"Python API"}),"\n",(0,i.jsx)(n.h3,{id:"index-creation-1",children:"Index Creation"}),"\n",(0,i.jsx)(n.h4,{id:"basic-construction-simple",children:"Basic Construction (Simple)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Index, Schema\n\n# Create with default settings\nindex = Index()\n\n# Create with custom settings\nindex = Index(\n    storage_path="/path/to/index",\n    cache_size=100000,\n    cache_ttl_secs=3600,\n    store_positions=True,\n    in_memory=False\n)\n\n# Create with a schema\nschema = Schema()\nschema.add_field(FieldSchema.text("title").with_boost(5.0))\nschema.add_field(FieldSchema.text("content").with_boost(1.0))\nschema.set_default_field("content")\n\nindex_with_schema = Index(\n    storage_path="/path/to/index",\n    schema=schema\n)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"builder-pattern-advanced",children:"Builder Pattern (Advanced)"}),"\n",(0,i.jsx)(n.p,{children:"For more complex configuration needs, use the builder pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Index, IndexBuilder, DictionaryConfig, Schema\n\n# Create using builder pattern\nbuilder = Index.builder()\nbuilder.with_in_memory(True)\nbuilder.with_cache_size(50000)\nbuilder.with_cache_ttl_secs(3600)\nbuilder.with_store_positions(True)\nindex = builder.build()\n\n# With dictionary configuration\ndict_config = DictionaryConfig(\n    hot_terms_capacity=1000,\n    hot_promotion_threshold=50,\n    medium_promotion_threshold=5,\n    optimization_interval_secs=1800\n)\n\n# With schema\nschema = Schema()\nschema.add_field(FieldSchema.text("title").with_boost(5.0))\nschema.add_field(FieldSchema.text("content").with_boost(1.0))\n\nadvanced_builder = Index.builder()\nadvanced_builder.with_dictionary_config(dict_config)\nadvanced_builder.with_schema(schema)\nadvanced_index = advanced_builder.build()\n'})}),"\n",(0,i.jsx)(n.h4,{id:"using-indexconfig-advanced",children:"Using IndexConfig (Advanced)"}),"\n",(0,i.jsx)(n.p,{children:"Another approach for advanced configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Index, IndexConfig, DictionaryConfig, Schema\n\n# Create dictionary config\ndict_config = DictionaryConfig(\n    hot_terms_capacity=1000,\n    hot_promotion_threshold=50\n)\n\n# Create schema\nschema = Schema()\nschema.add_field(FieldSchema.text("title").with_boost(5.0))\nschema.add_field(FieldSchema.text("content").with_boost(1.0))\n\n# Create index config\nconfig = IndexConfig(\n    in_memory=True,\n    cache_size=100000,\n    store_positions=True,\n    dictionary_config=dict_config,\n    schema=schema\n)\n\n# Create index with config\nindex = Index.with_config(config)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"document-operations-1",children:"Document Operations"}),"\n",(0,i.jsx)(n.h4,{id:"basic-document-operations",children:"Basic Document Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Add a simple document (legacy method)\nindex.add_document(\n    doc_id=1,\n    content="This is a test document"\n)\n\n# Add with metadata (legacy method)\nindex.add_document(\n    doc_id=2,\n    content="Another document with metadata",\n    metadata={\n        "title": "Document Title",\n        "author": "Author Name",\n        "tags": ["tag1", "tag2"],\n        "category": "Example",\n        "language": "en",\n        "created_at": "2023-01-01T00:00:00",\n        "source_url": "https://example.com/doc"\n    }\n)\n\n# Remove a document\nindex.remove_document(1)\n\n# Get a document\ndoc = index.get_document(2)\nprint(f"Title: {doc[\'title\']}")\n\n# Get multiple documents\ndocs = index.get_documents([1, 2, 3])\n'})}),"\n",(0,i.jsx)(n.h4,{id:"multi-field-document-operations",children:"Multi-Field Document Operations"}),"\n",(0,i.jsxs)(n.p,{children:["The preferred method for working with multi-field documents is ",(0,i.jsx)(n.code,{children:"add_document_with_fields"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create an index with schema\nschema = Schema()\nschema.add_field(FieldSchema.text("title").with_boost(5.0))\nschema.add_field(FieldSchema.text("content").with_boost(1.0))\nschema.add_field(FieldSchema.keyword("tags").with_boost(3.0))\nschema.add_field(FieldSchema.text("author").with_boost(2.0))\nschema.set_default_field("content")\n\nindex = Index(storage_path="/path/to/index", schema=schema)\n\n# Add a document with fields\ndoc_fields = {\n    "title": "Python Programming Guide",\n    "content": "Python is a high-level programming language with simple, easy-to-learn syntax.",\n    "tags": "programming python tutorial",  # For keyword fields, strings are used for terms\n    "author": "Jane Smith"\n}\nindex.add_document_with_fields(1, doc_fields)\n\n# Get a document with fields\ndoc = index.get_document(1)\nprint(f"Title: {doc[\'title\']}")\nprint(f"Author: {doc[\'author\']}")\nprint(f"Tags: {doc[\'tags\']}")  # Will be returned as a list of strings\n'})}),"\n",(0,i.jsx)(n.h3,{id:"query-operations-1",children:"Query Operations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Basic Query API"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Single term query\nresults = index.term_query("test")\n\n# AND query\nresults = index.and_query(["word1", "word2"])\n\n# OR query\nresults = index.or_query(["word1", "word2"])\n\n# Parse and execute a query string\nresults = index.parse_query("word1 word2")  # Default AND\n\n# Get term frequencies\nfreqs = index.get_term_frequencies(["word1", "word2"])\n\n# Advanced search with ranking\nresults = index.search("test document", ranking_method="bm25")\n\n# Search with field boosting and full document data\nresults = index.search_with_metadata(\n    "test document",\n    ranking_method="bm25",\n    boost_fields={"title": 2.0, "tags": 1.5},\n    limit=10\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advanced Query Engine API"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import PyQueryNode, PyValue, PyQueryBound, PyQueryExecutionParams\n\n# Create a term query\nquery = PyQueryNode.term("content", "search")\n\n# Create a boosted query\nquery = PyQueryNode.term("title", "search", boost=2.0)\n\n# Create a phrase query\nquery = PyQueryNode.phrase("content", ["fast", "search"], 2)\n\n# Boolean operators\nquery = PyQueryNode.and([\n    PyQueryNode.term("content", "search"),\n    PyQueryNode.term("title", "engine")\n])\n\n# Range query for numeric field\nstart_bound = PyQueryBound.included(PyValue.integer(100))\nend_bound = PyQueryBound.excluded(PyValue.integer(500))\nquery = PyQueryNode.range("word_count", start_bound, end_bound)\n\n# Create execution parameters\nparams = PyQueryExecutionParams(\n    scoring_algorithm="bm25l",\n    explain=True,\n    limit=10,\n    bm25_k1=1.2,\n    bm25_b=0.75,\n    field_boosts={"title": 2.0, "tags": 1.5}\n)\n\n# Execute the query\nresult = index.execute_query(query, params)\n\n# Get results\nfor doc_id, score in result.scored_docs:\n    doc = index.get_document(doc_id)\n    print(f"Document: {doc[\'title\']}, Score: {score}")\n\n# Get explanations\nif result.explanations:\n    for doc_id, explanation in result.explanations.items():\n        print(f"Explanation for document {doc_id}:")\n        print(explanation.to_tree())\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Field-Specific Search Helpers"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Search in a specific field\nresults = index.search_field("title", "search", algorithm="bm25", limit=10)\n\n# Search for a phrase\nresults = index.search_phrase("content", ["fast", "search"], slop=2, \n                             algorithm="bm25", limit=10)\n\n# Search multiple fields with different boosts\nfield_values = [\n    ("title", "search", 2.0),\n    ("content", "engine", 1.0),\n    ("tags", "search", 1.5)\n]\nresults = index.search_multi_field(field_values, algorithm="bm25", limit=10)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/docs/query-engine",children:"Query Engine documentation"})," for more details on the advanced query capabilities."]}),"\n",(0,i.jsx)(n.h3,{id:"term-suggestions-1",children:"Term Suggestions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get term suggestions\nsuggestions = index.suggest_terms(\"prog\")\n\n# Access suggestion details\nfor suggestion in suggestions:\n    print(f\"Term: {suggestion['term']}, Score: {suggestion['score']}\")\n"})}),"\n",(0,i.jsx)(n.h3,{id:"index-management-1",children:"Index Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get index statistics\nstats = index.stats()\nprint(f\"Documents: {stats['document_count']}, Terms: {stats['term_count']}\")\n\n# Optimize the index\nindex.optimize()\n\n# Create a backup\nindex.backup(\"/path/to/backup\")\n"})}),"\n",(0,i.jsx)(n.h3,{id:"query-builder",children:"Query Builder"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import QueryBuilder\n\n# Build complex queries\nbuilder = QueryBuilder(index)\nbuilder.add_term("word1").add_term("word2")\nresults = builder.build_and_query()\n\n# OR query\nbuilder.clear().add_term("word1").add_term("word2")\nresults = builder.build_or_query()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling-1",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import IndexError, DocumentNotFoundError, TermNotFoundError\n\ntry:\n    doc = index.get_document(999)\nexcept DocumentNotFoundError as e:\n    print(f"Document not found: {e}")\nexcept IndexError as e:\n    print(f"Index error: {e}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import BooleanOperators, RankingMethods\n\n# Use constants\nprint(BooleanOperators["AND"])  # "AND"\nprint(RankingMethods["BM25"])   # "bm25"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);