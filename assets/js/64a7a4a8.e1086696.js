"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1633],{2110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"schema","title":"schema","description":"The Schema system allows you to define structured document formats with multiple field types and custom analyzers. This enables more sophisticated document indexing and field-specific searching with relevance control.","source":"@site/docs/schema.md","sourceDirName":".","slug":"/schema","permalink":"/docs/schema","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/schema.md","tags":[],"version":"current","frontMatter":{"id":"schema","title":"schema","sidebar_label":"schema"},"sidebar":"docs","previous":{"title":"API Reference","permalink":"/docs/api"},"next":{"title":"Query Engine","permalink":"/docs/query-engine"}}');var s=t(4848),a=t(8453);const d={id:"schema",title:"schema",sidebar_label:"schema"},r="Schema and Multi-Field Indexing",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Field Types",id:"field-types",level:2},{value:"Rust API",id:"rust-api",level:2},{value:"Creating a Schema",id:"creating-a-schema",level:3},{value:"Creating an Index with Schema",id:"creating-an-index-with-schema",level:3},{value:"Searching by Field",id:"searching-by-field",level:3},{value:"Python API",id:"python-api",level:2},{value:"Creating a Schema",id:"creating-a-schema-1",level:3},{value:"Creating an Index with Schema",id:"creating-an-index-with-schema-1",level:3},{value:"Searching by Field",id:"searching-by-field-1",level:3},{value:"Field Boosting with Simple Search API",id:"field-boosting-with-simple-search-api",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Complete Schema Definition Example",id:"complete-schema-definition-example",level:3},{value:"Document Indexing with Multiple Fields",id:"document-indexing-with-multiple-fields",level:3},{value:"Complex Queries Using Multiple Fields",id:"complex-queries-using-multiple-fields",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Field Values Not Appearing in Document Metadata",id:"field-values-not-appearing-in-document-metadata",level:3},{value:"Query Returns Zero or Low Scores",id:"query-returns-zero-or-low-scores",level:3},{value:"Text Field Search Considerations",id:"text-field-search-considerations",level:3},{value:"Schema Not Serializing or Deserializing Correctly",id:"schema-not-serializing-or-deserializing-correctly",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"schema-and-multi-field-indexing",children:"Schema and Multi-Field Indexing"})}),"\n",(0,s.jsx)(n.p,{children:"The Schema system allows you to define structured document formats with multiple field types and custom analyzers. This enables more sophisticated document indexing and field-specific searching with relevance control."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Schema system provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A flexible document model with typed fields"}),"\n",(0,s.jsx)(n.li,{children:"Support for multiple field types (text, keyword, numeric, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Per-field analyzers for customized text processing"}),"\n",(0,s.jsx)(n.li,{children:"Field-specific inverted indexes"}),"\n",(0,s.jsx)(n.li,{children:"Configurable field boosting for relevance control"}),"\n",(0,s.jsx)(n.li,{children:"Schema serialization for persistence"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"field-types",children:"Field Types"}),"\n",(0,s.jsx)(n.p,{children:"The following field types are supported:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Analyzer"}),(0,s.jsx)(n.th,{children:"Use Case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Text"}),(0,s.jsx)(n.td,{children:"Tokenized text with analysis"}),(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"General content, descriptions"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Keyword"}),(0,s.jsx)(n.td,{children:"Non-tokenized exact match"}),(0,s.jsx)(n.td,{children:"Keyword"}),(0,s.jsx)(n.td,{children:"IDs, categories, exact matching"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Numeric"}),(0,s.jsx)(n.td,{children:"Integer or float values"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Counts, ratings, metrics"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Date"}),(0,s.jsx)(n.td,{children:"ISO format dates/timestamps"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Timestamps, calendars"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Boolean"}),(0,s.jsx)(n.td,{children:"True/false values"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"Flags, status indicators"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"rust-api",children:"Rust API"}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-schema",children:"Creating a Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fast_inverted_index::schema::{Schema, SchemaBuilder, FieldSchema, FieldType, AnalyzerType};\n\n// Create a schema using the builder\nlet schema = SchemaBuilder::new()\n    .add_field(FieldSchema::text("title").with_boost(5.0))\n    .add_field(FieldSchema::text("content").with_boost(1.0))\n    .add_field(FieldSchema::keyword("tags").with_boost(3.0))\n    .add_field(FieldSchema::numeric("rating"))\n    .add_field(FieldSchema::date("created_at"))\n    .add_field(FieldSchema::boolean("is_active"))\n    .default_field("content")\n    .build();\n\n// Create a schema manually\nlet mut schema = Schema::new();\nschema.add_field(FieldSchema::new("title", FieldType::Text).with_boost(5.0));\nschema.add_field(FieldSchema::new("content", FieldType::Text).with_boost(1.0));\nschema.set_default_field("content");\n\n// Save schema to a file\nschema.save_to_file("schema.json").unwrap();\n\n// Load schema from a file\nlet loaded_schema = Schema::load_from_file("schema.json").unwrap();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-an-index-with-schema",children:"Creating an Index with Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fast_inverted_index::{Index, IndexBuilder};\nuse std::collections::HashMap;\n\n// Create an index with the schema\nlet mut index = IndexBuilder::new()\n    .with_storage_path("/path/to/index")\n    .with_schema(schema)\n    .build()\n    .unwrap();\n\n// Add a document with fields\nlet mut fields = HashMap::new();\nfields.insert("title".to_string(), "Document Title".to_string());\nfields.insert("content".to_string(), "This is the document content".to_string());\nfields.insert("tags".to_string(), "example documentation".to_string());\nfields.insert("rating".to_string(), "4.5".to_string());\nfields.insert("created_at".to_string(), "2025-05-01T12:00:00Z".to_string());\nfields.insert("is_active".to_string(), "true".to_string());\n\nindex.add_document_with_fields(1, fields).unwrap();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"searching-by-field",children:"Searching by Field"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fast_inverted_index::query::{QueryNode, QueryExecutionParams, ScoringAlgorithm};\nuse std::collections::HashMap;\n\n// Search in a specific field\nlet title_query = QueryNode::term("title", "document");\nlet result = index.execute_query(&title_query, None).unwrap();\n\n// Search multiple fields with different boosts\nlet multi_field_query = QueryNode::or(vec![\n    QueryNode::term_with_boost("title", "document", 2.0),\n    QueryNode::term_with_boost("content", "document", 1.0),\n    QueryNode::term_with_boost("tags", "document", 1.5)\n]);\n\n// Create execution parameters with field boosts\nlet mut params = QueryExecutionParams::default();\nparams.scoring_algorithm = ScoringAlgorithm::BM25;\n\n// Add global field boosts (applied on top of per-query boosts)\nlet mut field_boosts = HashMap::new();\nfield_boosts.insert("title".to_string(), 1.5);\nfield_boosts.insert("tags".to_string(), 1.2);\nparams.field_boosts = field_boosts;\n\nlet result = index.execute_query(&multi_field_query, Some(params)).unwrap();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"python-api",children:"Python API"}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-schema-1",children:"Creating a Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Schema, FieldSchema, FieldType, AnalyzerType\n\n# Create a schema\nschema = Schema()\n\n# Add fields with different types\nschema.add_field(FieldSchema.text("title").with_boost(5.0))\nschema.add_field(FieldSchema.text("content").with_boost(1.0))\nschema.add_field(FieldSchema.keyword("tags").with_boost(3.0))\nschema.add_field(FieldSchema.numeric("rating"))\nschema.add_field(FieldSchema.date("created_at"))\nschema.add_field(FieldSchema.boolean("is_active"))\n\n# Set default field for queries that don\'t specify a field\nschema.set_default_field("content")\n\n# Get schema information\nprint(f"Schema has {schema.len()} fields")\nprint(f"Field names: {schema.field_names()}")\n\n# Save schema to a file\nschema.save_to_file("schema.json")\n\n# Load schema from a file\nloaded_schema = Schema.load_from_file("schema.json")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-an-index-with-schema-1",children:"Creating an Index with Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Index\n\n# Create an index with the schema\nindex = Index(storage_path="/path/to/index", schema=schema)\n\n# Add a document with fields\ndoc_fields = {\n    "title": "Document Title",\n    "content": "This is the document content",\n    "tags": "example documentation",\n    "rating": "4.5",\n    "created_at": "2025-05-01T12:00:00Z",\n    "is_active": "true"\n}\n\nindex.add_document_with_fields(1, doc_fields)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"searching-by-field-1",children:"Searching by Field"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import QueryNode, QueryExecutionParams\n\n# Search in a specific field with the convenience method\ntitle_results = index.search_field("title", "document", ranking_method="bm25", limit=10)\n\n# Get the first matching document\nif title_results:\n    doc_id, score = title_results[0]\n    doc = index.get_document(doc_id)\n    print(f"Found document: {doc.get(\'title\', \'Untitled\')} (Score: {score:.4f})")\n\n# Search multiple fields with QueryNode API\nmulti_field_query = QueryNode.OR([\n    QueryNode.term("title", "document", boost=2.0),\n    QueryNode.term("content", "document", boost=1.0),\n    QueryNode.term("tags", "document", boost=1.5)\n])\n\n# Create execution parameters with field boosts\nparams = QueryExecutionParams(\n    scoring_algorithm="bm25",\n    limit=10,\n    field_boosts={\n        "title": 1.5,\n        "tags": 1.2\n    }\n)\n\n# Execute the query\nresults = index.execute_query(multi_field_query, params)\n\n# Process the results\nfor doc_id, score in results.scored_docs:\n    doc = index.get_document(doc_id)\n    print(f"Document ID: {doc_id}, Score: {score:.4f}")\n    print(f"Title: {doc.get(\'title\', \'Untitled\')}")\n    print(f"Content: {doc.get(\'content\', \'No content\')[:50]}...")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"field-boosting-with-simple-search-api",children:"Field Boosting with Simple Search API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Define field boosts\nboost_fields = {\n    "title": 5.0,    # Title matches are 5x more important\n    "content": 1.0,  # Content matches have normal importance\n    "tags": 3.0      # Tag matches are 3x more important\n}\n\n# Search with boosts across all fields\nresults = index.search("document", ranking_method="bm25", boost_fields=boost_fields, limit=10)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,s.jsx)(n.h3,{id:"complete-schema-definition-example",children:"Complete Schema Definition Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Schema, FieldSchema, FieldType, AnalyzerType\n\n# Create a schema for a blog post\nschema = Schema()\n\n# Add fields with explanations\nschema.add_field(FieldSchema.text("title")\n    .with_boost(5.0)\n    .with_analyzer(AnalyzerType.STANDARD))\n# Title field: Important for search relevance, gets 5x boost\n\nschema.add_field(FieldSchema.text("content")\n    .with_boost(1.0)\n    .with_analyzer(AnalyzerType.STANDARD))\n# Content field: Main text, normal importance\n\nschema.add_field(FieldSchema.keyword("tags")\n    .with_boost(3.0)\n    .with_analyzer(AnalyzerType.KEYWORD))\n# Tags field: Important for categorization, uses keyword analyzer for exact matching\n\nschema.add_field(FieldSchema.text("author")\n    .with_boost(2.0))\n# Author field: Author name, gets 2x boost\n\nschema.add_field(FieldSchema.keyword("category")\n    .with_boost(1.5))\n# Category field: Blog category, keyword field for exact matching\n\nschema.add_field(FieldSchema.date("published_at"))\n# Publication date: For sorting and filtering\n\nschema.add_field(FieldSchema.numeric("read_time"))\n# Read time in minutes: For filtering articles by length\n\nschema.add_field(FieldSchema.boolean("is_published"))\n# Publication status: For filtering published/draft posts\n\n# Set default field for queries\nschema.set_default_field("content")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"document-indexing-with-multiple-fields",children:"Document Indexing with Multiple Fields"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import Index, Schema\n\n# Create an index with the schema\nindex = Index(storage_path="blog_index", schema=schema)\n\n# Add blog posts\npost1 = {\n    "title": "Getting Started with Python",\n    "content": "Python is a high-level programming language with simple, easy-to-learn syntax...",\n    "tags": "python programming tutorial",\n    "author": "Jane Smith",\n    "category": "programming",\n    "published_at": "2025-01-15T10:00:00Z",\n    "read_time": "5",\n    "is_published": "true"\n}\nindex.add_document_with_fields(1, post1)\n\npost2 = {\n    "title": "Advanced Rust Programming",\n    "content": "Rust is a systems programming language focused on safety, memory management...",\n    "tags": "rust programming advanced",\n    "author": "John Doe",\n    "category": "programming",\n    "published_at": "2025-02-20T14:30:00Z",\n    "read_time": "15",\n    "is_published": "true"\n}\nindex.add_document_with_fields(2, post2)\n\npost3 = {\n    "title": "Machine Learning Fundamentals",\n    "content": "Machine learning is a subset of artificial intelligence that enables systems to learn...",\n    "tags": "machine-learning ai data-science",\n    "author": "Jane Smith",\n    "category": "data-science",\n    "published_at": "2025-03-10T09:45:00Z",\n    "read_time": "12",\n    "is_published": "true"\n}\nindex.add_document_with_fields(3, post3)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"complex-queries-using-multiple-fields",children:"Complex Queries Using Multiple Fields"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fast_inverted_index import QueryNode, QueryExecutionParams, QueryBound, Value\n\n# Find Python tutorials by Jane Smith\ncomplex_query = QueryNode.AND([\n    # Document must be about Python\n    QueryNode.OR([\n        QueryNode.term("title", "python", boost=5.0),\n        QueryNode.term("content", "python", boost=1.0),\n        QueryNode.term("tags", "python", boost=3.0)\n    ]),\n    # Must be authored by Jane Smith\n    QueryNode.term("author", "jane smith"),\n    # Must be a tutorial\n    QueryNode.term("tags", "tutorial"),\n    # Must be published\n    QueryNode.term("is_published", "true")\n])\n\n# Execute the query\nparams = QueryExecutionParams(\n    scoring_algorithm="bm25l",\n    limit=10,\n    field_boosts={\n        "title": 2.0,\n        "tags": 1.5\n    }\n)\nresults = index.execute_query(complex_query, params)\n\n# Process matching documents\nfor doc_id, score in results.scored_docs:\n    doc = index.get_document(doc_id)\n    print(f"Document {doc_id}: {doc.get(\'title\', \'Untitled\')} (Score: {score:.4f})")\n    print(f"  Author: {doc.get(\'author\', \'Unknown\')}")\n    print(f"  Tags: {doc.get(\'tags\', \'None\')}")\n    print(f"  Read time: {doc.get(\'read_time\', \'Unknown\')} minutes")\n    print(f"  Published: {doc.get(\'published_at\', \'Unknown\')}")\n    print()\n\n# Find recent data science articles with short read time\ndate_threshold = "2025-01-01T00:00:00Z"\nread_time_query = QueryNode.AND([\n    # Must be in data science category\n    QueryNode.term("category", "data-science"),\n    # Published after January 1, 2025\n    QueryNode.range(\n        "published_at",\n        QueryBound.included(Value.string(date_threshold)),\n        QueryBound.unbounded()\n    ),\n    # Read time under 15 minutes\n    QueryNode.range(\n        "read_time",\n        QueryBound.unbounded(),\n        QueryBound.included(Value.integer(15))\n    )\n])\n\ntime_results = index.execute_query(read_time_query)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Define Appropriate Field Types"}),": Use the most specific field type for each field (text for full-text search, keyword for exact matching, numeric for numbers, etc.)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Set Appropriate Boosts"}),": Give higher boosts to more important fields (title, tags) and lower boosts to less important fields (content)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Choose the Right Analyzer"}),": Use the standard analyzer for normal text, the keyword analyzer for exact matches, and the simple analyzer for minimal processing"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Set a Default Field"}),": Always set a default field for queries that don't specify a field, typically the main content field"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Store Fields Properly"}),": Use ",(0,s.jsx)(n.code,{children:"add_document_with_fields()"})," for multi-field documents instead of the legacy ",(0,s.jsx)(n.code,{children:"add_document()"})," with metadata"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ensure Field Consistency"}),": Keep field types consistent across all documents; don't mix types for the same field"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Field-Specific Queries"}),": When possible, direct queries to specific fields rather than searching all fields"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Combine Field Boosts with Query Boosts"}),": Use both the field's default boost and query-specific boosts for fine-grained relevance control"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(n.h3,{id:"field-values-not-appearing-in-document-metadata",children:"Field Values Not Appearing in Document Metadata"}),"\n",(0,s.jsx)(n.p,{children:"If field values aren't appearing when retrieving documents:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Ensure you\'re using add_document_with_fields and not just add_document\nindex.add_document_with_fields(doc_id, fields)\n\n# Verify fields when retrieving the document\ndoc = index.get_document(doc_id)\nfor field in schema.field_names():\n    if field in doc:\n        print(f"{field}: {doc[field]}")\n    else:\n        print(f"{field}: Not found")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"query-returns-zero-or-low-scores",children:"Query Returns Zero or Low Scores"}),"\n",(0,s.jsx)(n.p,{children:"If your field queries are returning zero or unexpectedly low scores:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Ensure you\'re searching the correct field names\nresults = index.search_field("title", "term", ranking_method="bm25", limit=10)\n\n# Check if you need to use the exact term for keyword fields (case-sensitive)\nkeyword_results = index.search_field("category", "Exact-Category-Name", ranking_method="bm25")\n\n# Try using field boosting to increase scores\nboosted_results = index.search("term", ranking_method="bm25", \n                              boost_fields={"title": 5.0, "tags": 3.0})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"text-field-search-considerations",children:"Text Field Search Considerations"}),"\n",(0,s.jsx)(n.p,{children:"When searching text fields, be aware of how text analysis affects your queries:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tokenization"}),': Text fields are tokenized into individual terms. For example, "Jane Smith" becomes ["jane", "smith"].']}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Case Sensitivity"}),": Terms are typically lowercased during indexing. When searching, your query is also lowercased."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Single vs. Multi-term Searches"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.code,{children:"search_field()"}),", it creates a term query looking for an exact token match:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# This searches for the token "jane", not the full name "Jane Smith"\nresults = index.search_field("author", "Jane")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"For multi-term queries, use the QueryNode API with phrase queries:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# This searches for the phrase "jane smith" (with terms in that order)\nquery = QueryNode.phrase("author", ["jane", "smith"], slop=0)\nresults = index.execute_query(query, params)\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Partial Matching"}),": For partial term matches, use prefix queries:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# This matches terms starting with "ja"\nquery = QueryNode.prefix("author", "ja")\nresults = index.execute_query(query, params)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Using Keyword Fields"}),": For exact string matching without tokenization, use keyword fields instead of text fields:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Define a keyword field\nschema.add_field(FieldSchema.keyword("exact_name"))\n\n# Add document with an exact name field\ndoc_fields = {"exact_name": "Jane Smith"}\nindex.add_document_with_fields(1, doc_fields)\n\n# Search for the exact string match\nresults = index.search_field("exact_name", "Jane Smith")\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"schema-not-serializing-or-deserializing-correctly",children:"Schema Not Serializing or Deserializing Correctly"}),"\n",(0,s.jsx)(n.p,{children:"If you have issues with schema persistence:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Ensure the schema directory exists before saving\nimport os\nos.makedirs(os.path.dirname("path/to/schema.json"), exist_ok=True)\n\n# Use absolute paths for schema files\nschema.save_to_file(os.path.abspath("path/to/schema.json"))\n\n# Check for file permissions\ntry:\n    schema.save_to_file("path/to/schema.json")\nexcept Exception as e:\n    print(f"Error saving schema: {e}")\n\n# Verify the schema after loading\nloaded_schema = Schema.load_from_file("path/to/schema.json")\nprint(f"Loaded {loaded_schema.len()} fields: {loaded_schema.field_names()}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/api",children:"API Reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/query-engine",children:"Query Engine"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/examples",children:"Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/getting-started",children:"Getting Started"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function d(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);