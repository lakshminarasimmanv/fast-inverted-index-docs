"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7291],{8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>l});var i=n(6540);const t={},s=i.createContext(t);function d(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:r},e.children)}},8795:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>l,default:()=>o,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"query-builder","title":"query uuilder","description":"The QueryBuilder API provides a convenient way to construct and execute queries against the Fast Inverted Index from Python.","source":"@site/docs/query_builder.md","sourceDirName":".","slug":"/query-builder","permalink":"/fast-inverted-index-docs/docs/query-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/username/fast-inverted-index/tree/main/docusaurus/docs/query_builder.md","tags":[],"version":"current","frontMatter":{"id":"query-builder","title":"query uuilder","sidebar_label":"query uuilder"},"sidebar":"docs","previous":{"title":"Query Engine","permalink":"/fast-inverted-index-docs/docs/query-engine"},"next":{"title":"examples","permalink":"/fast-inverted-index-docs/docs/examples"}}');var t=n(4848),s=n(8453);const d={id:"query-builder",title:"query uuilder",sidebar_label:"query uuilder"},l="Query Builder API",u={},a=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:3},{value:"<code>add_term(term: str) -&gt; QueryBuilder</code>",id:"add_termterm-str---querybuilder",level:4},{value:"<code>build_and_query() -&gt; List[int]</code>",id:"build_and_query---listint",level:4},{value:"<code>build_or_query() -&gt; List[int]</code>",id:"build_or_query---listint",level:4},{value:"<code>clear() -&gt; QueryBuilder</code>",id:"clear---querybuilder",level:4},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Alternative Approaches",id:"alternative-approaches",level:2},{value:"Query Parsing Rules",id:"query-parsing-rules",level:2},{value:"Examples",id:"examples",level:2},{value:"Building a Search Form",id:"building-a-search-form",level:3},{value:"Combining Multiple QueryBuilders",id:"combining-multiple-querybuilders",level:3},{value:"Thread Safety",id:"thread-safety",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"query-builder-api",children:"Query Builder API"})}),"\n",(0,t.jsx)(r.p,{children:"The QueryBuilder API provides a convenient way to construct and execute queries against the Fast Inverted Index from Python."}),"\n",(0,t.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"QueryBuilder"})," class is a helper class that simplifies the process of creating queries with multiple terms and applying boolean operations like AND and OR. It is especially useful for programmatically building queries based on user input or other dynamic sources."]}),"\n",(0,t.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from fast_inverted_index import Index, QueryBuilder\n\n# Create an index and add some documents\nindex = Index()\nindex.add_document(1, "Rust programming language", {"tags": ["rust", "programming"]})\nindex.add_document(2, "Python programming language", {"tags": ["python", "programming"]})\n\n# Create a QueryBuilder and add terms\nbuilder = QueryBuilder(index)\nbuilder.add_term("rust")\n\n# Execute an OR query\ndoc_ids = builder.build_or_query()\n# Returns [1]\n\n# Add another term\nbuilder.add_term("python")\n\n# Execute an OR query with both terms\ndoc_ids = builder.build_or_query()\n# Returns [1, 2]\n\n# Execute an AND query with both terms\ndoc_ids = builder.build_and_query()\n# Returns [] (no document contains both terms)\n\n# Clear all terms\nbuilder.clear()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(r.h3,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"QueryBuilder(index: Index)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Creates a new QueryBuilder instance associated with the given index."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"index"}),": The Index instance to query against"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(r.h4,{id:"add_termterm-str---querybuilder",children:(0,t.jsx)(r.code,{children:"add_term(term: str) -> QueryBuilder"})}),"\n",(0,t.jsx)(r.p,{children:"Adds a single term to the query."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"term"}),": The term to add"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"The builder instance for method chaining"}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"build_and_query---listint",children:(0,t.jsx)(r.code,{children:"build_and_query() -> List[int]"})}),"\n",(0,t.jsx)(r.p,{children:"Builds and executes an AND query with all added terms."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"A list of document IDs that match all terms in the query"}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"build_or_query---listint",children:(0,t.jsx)(r.code,{children:"build_or_query() -> List[int]"})}),"\n",(0,t.jsx)(r.p,{children:"Builds and executes an OR query with all added terms."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"A list of document IDs that match at least one term in the query"}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"clear---querybuilder",children:(0,t.jsx)(r.code,{children:"clear() -> QueryBuilder"})}),"\n",(0,t.jsx)(r.p,{children:"Clears all terms from the builder."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"The builder instance for method chaining"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsxs)(r.p,{children:["The QueryBuilder is a thin wrapper around the Index's ",(0,t.jsx)(r.code,{children:"and_query"})," and ",(0,t.jsx)(r.code,{children:"or_query"})," methods. When you call ",(0,t.jsx)(r.code,{children:"build_and_query()"})," or ",(0,t.jsx)(r.code,{children:"build_or_query()"}),", the builder passes all collected terms to the corresponding method on the Index."]}),"\n",(0,t.jsxs)(r.p,{children:["Under the hood, the Index creates a Rust ",(0,t.jsx)(r.code,{children:"Query"})," object with the appropriate boolean operator and executes it against the index. The results are returned as a list of document IDs."]}),"\n",(0,t.jsx)(r.h2,{id:"alternative-approaches",children:"Alternative Approaches"}),"\n",(0,t.jsx)(r.p,{children:"If you need more advanced query capabilities, consider using:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"search"})," method on the Index, which returns document IDs with scores:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Direct search with AND query\nresults = index.search("term1 term2")  # AND query\n# Returns [(doc_id, score), ...]\n\n# Direct search with OR query\nresults = index.search("term1 OR term2")  # OR query\n# Returns [(doc_id, score), ...]\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"QueryNode"})," API for complex queries with field-specific searches, boosting, and negation:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from fast_inverted_index import QueryNode, QueryExecutionParams\n\n# Build a complex query\nquery = QueryNode.OR([\n    QueryNode.term("title", "rust", boost=2.0),\n    QueryNode.term("content", "programming")\n])\n\n# Execute with custom parameters\nparams = QueryExecutionParams(scoring_algorithm="bm25l", limit=10)\nresult = index.execute_query(query, params)\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"query-parsing-rules",children:"Query Parsing Rules"}),"\n",(0,t.jsxs)(r.p,{children:["When using string-based queries (via the ",(0,t.jsx)(r.code,{children:"search"})," method), it's important to understand the behavior of the query parser:"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Default Operator"}),": Spaces between terms create an AND relationship (all terms must match)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"OR Operator"}),": The OR keyword creates an OR relationship between terms"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Parser Behavior"}),": The query parser has specific rules for handling OR operators"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Examples:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:'"term1 term2"'})," \u2192 Documents containing both term1 AND term2"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:'"term1 OR term2"'})," \u2192 Documents containing either term1 OR term2"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:'"term1 OR term2 term3"'})," \u2192 Only matches documents containing term3 AND either term1 OR term2"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:'"term1 term2 OR term3"'})," \u2192 Documents containing either (term1 AND term2) OR term3"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Important Notes"}),":"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"The parser doesn't support parentheses for explicit grouping"}),"\n",(0,t.jsx)(r.li,{children:"The parser treats OR operations with higher precedence than AND"}),"\n",(0,t.jsxs)(r.li,{children:["For complex queries with explicit grouping, field-specific searches, or advanced operators, use the ",(0,t.jsx)(r.code,{children:"QueryNode"})," API"]}),"\n",(0,t.jsx)(r.li,{children:"When writing queries, keep them simple and test them to verify behavior"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"If you need more precise control, use the QueryBuilder to construct boolean queries programmatically:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Build an AND query\nbuilder = QueryBuilder(index)\nbuilder.add_term("term1")\nbuilder.add_term("term2")\ndoc_ids = builder.build_and_query()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.h3,{id:"building-a-search-form",children:"Building a Search Form"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def search_documents(index, query_string, fields=None, use_or=False):\n    # Split the query string into terms\n    terms = query_string.split()\n    \n    # Create a builder\n    builder = QueryBuilder(index)\n    \n    # Add each term\n    for term in terms:\n        builder.add_term(term)\n    \n    # Execute query based on the operator choice\n    if use_or:\n        return builder.build_or_query()\n    else:\n        return builder.build_and_query()\n"})}),"\n",(0,t.jsx)(r.h3,{id:"combining-multiple-querybuilders",children:"Combining Multiple QueryBuilders"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# Create builders for different field queries\ntitle_builder = QueryBuilder(index)\ntitle_builder.add_term("rust")\n\ncontent_builder = QueryBuilder(index)\ncontent_builder.add_term("systems")\ncontent_builder.add_term("programming")\n\n# Get results from each builder\ntitle_docs = title_builder.build_and_query()\ncontent_docs = content_builder.build_and_query()\n\n# Combine the results (union of sets)\ncombined_docs = list(set(title_docs) | set(content_docs))\n'})}),"\n",(0,t.jsx)(r.h2,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,t.jsx)(r.p,{children:"The QueryBuilder class is not thread-safe. If you need to use the same index from multiple threads, each thread should create its own QueryBuilder instance."})]})}function o(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);